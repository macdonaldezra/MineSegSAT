Bootstrap: docker
From: nvidia/cuda:11.7.1-cudnn8-devel-ubuntu22.04

# Environment variables that will be set during runtime
%environment
    export LANG=C.UTF-8
    # May need to specify relevant time zone for your region depending on whether or not
    # Singularity detects your host's time zone correctly
    # Time Zone names can be found here: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    export TZ="Canada/Pacific"
    # Add path to poetry bin to PATH
    export PATH="/root/.local/bin:$PATH"
    export CUDA_HOME="/usr/local/cuda"

# Copy over files from host to container
%files
    mine_seg_sat /code/
    poetry.lock /code/
    pyproject.toml /code/
    README.md /code/

# Install Python dependencies
%post
    export TZ="Canada/Pacific"
    ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

    # Environment variables used by GDAL during compile
    export CPLUS_INCLUDE_PATH=/usr/include/gdal
    export C_INCLUDE_PATH=/usr/include/gdal

    # Downloads the latest package lists (important)... and curl
    apt-get update -y -qq && apt-get upgrade -y -qq && apt-get install -y -qq software-properties-common curl

    # Add the deadsnakes PPA to get Python 3.9 and the ubuntugis PPA to get GDAL
    add-apt-repository ppa:deadsnakes/ppa
    add-apt-repository ppa:ubuntugis/ppa
    apt-get update -y -qq
    apt-get install -y -qq gdal-bin

    # Install Python 3.9, dependencies for OpenCV, and GDAL
    DEBIAN_FRONTEND=noninteractive apt-get install -y -qq python3.9 \
        python3-dev \
        python3.9-distutils \
        python3.9-venv \
        python3-pip \
        python3-setuptools \
        libpython3.9-dev \
        libkrb5-dev \
        libgdal-dev \
        libgl1 \
        gcc

    echo "alias python=python3.9" >> ~/.bashrc && alias python=python3.9
    # Reduce image size
    rm -rf /var/lib/apt/lists/*

    # Install Python Poetry
    curl -sSL https://install.python-poetry.org | python3 -
    echo 'export PATH=\"/root/.local/bin:$PATH\"' >> ~/.bashrc && export PATH="/root/.local/bin:$PATH"

    cd /code
    python -m venv /ml-env
    . /ml-env/bin/activate
    poetry config virtualenvs.create false
    poetry install --no-interaction --no-ansi

%runscript
    # Executed commands and then follow it with a command like the following
    # python -m mine_seg_sat.train
    cd /code
    . /ml-env/bin/activate
